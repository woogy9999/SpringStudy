<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
    <!-- 사용자 정의 클래스 메모리 할당 (스프링 관리 요청) 
         제외 : VO (데이터형으로 사용), 인터페이스
    -->
    <context:component-scan base-package="com.sist.*"/>
    <!-- 
        스프링 역할 
        ========
          1) 객체의 생명주기 (클래스 관리자)
             ===========
               객체 생성 / 객체 소멸  ===== 컨테이너 
               *** 객체 찾기 = DL (getBean())
          2) 객체 생성시에 변수에 대한 초기화 : DI
                       =============
                       1.setter DI 
                         p:name="홍길동" => setName("홍길동")
                       2.constructor DI
                         c:name="홍길동" => A(String name)
                                            ============ 홍길동
                       3.객체 생성시 = init-method="메소드명"
                         객체 소멸시 = destory-method="메소드명"
        선택적인 클래스 메모리 할당
        @Component, => 일반클래스 (~Manager,MainClass)
        @Repository, => DAO (table한개에 대한 제어)
        @Service, => DAO 여러개를 한번에 처리 
         ==========> 게시판 
                     댓글 
        ========================웹
        @Controller, : Model => 화면 이동 (sendRedirect,forward)
        @RestController, : Model => void 
                                    ==> 자바스크립트 연동 
                                    ==> JSON
                   React/Vue => 화면이동 (Router)
        @ControllerAdvice, : Model에서 발생하는 예외처리 
        ======================== 
        @Configuration : 클래스 설정 XML을 대체 (자바)
        
        MVC 
                 request                request
          요청(.do) ===> DispatcherServlet ===> Model <==> DAO
            JSP   <=== DispatcherServlet <=== Model
                   request                 | 결과값
                                             request/session
                             |
                            집중 => DispatcherServlet : 도메인 방식 
        
        DI와 관련 => 값 주입
        @Autowired, : 자동주입 => 스프링에서 객체를 찾아서 주입
                      ** 일반 멤버변수는 불가능 / 객체 주소를 전송 
                                           =======
                class A
                {
                   @Aurowired
                   private String name;(X)
                   private B b;(O)
                }
                   @Value("홍길동") => properties => DB
                => private String name="홍길동";
                
                class A => 어노테이션은 한개만 제외
                {
                    @Autowired
                    private B b;
                    
                    @Autowired
                    private C c;
                }
        @PostConstruct, : init-method
        @PreDestroy, : destory-method
        @Resource : 사용자가 선택한다 
                    @Resource(name="클래스 아이디")
                    
        *** @Autowired : 사용시는 반드시 클래스 메모리 할당이 되어 있어야 한다
        
        @Component
        class A
        {
           @Autowired
           private B b=new B(); => null
        }
        
        A a=new A()
        => 스프링은 등록 클래스외에는 역할 수행을 하지 않는다 
     -->
</beans>