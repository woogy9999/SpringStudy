<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<util:properties id="db"
		location="/WEB-INF/config/db.properties" />

	<!-- 데이터베이스 정보 수집 : BasicDataSource -->
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource"
		p:driverClassName="#{db['driver']}" p:url="#{db['url']}"
		p:username="#{db['username']}" p:password="#{db['password']}"
		p:maxActive="#{db['maxActive']}" p:maxIdle="#{db['maxIdle']}"
		p:maxWait="#{db['maxWait']}" />

	<tx:annotation-driven />
	<!-- @Transactional => AOP를 이용해서 처리 -->
	
	<!-- MyBatis 로그 확인 -->
	<bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="ds" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE" />
				<property name="sqlPrefix" value="SQL : " />
			</bean>
		</property>
	</bean>


	<!-- MyBatis로 전송 : SqlSessionFactoryBean -->
	<bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" 
		p:configLocation="/WEB-INF/config/Config.xml"
		
		/>
	<!-- SqlSessionFactoryBean을 이용해서 Mapper구현 모든 Mapper를 한번에 처리 <mybatis-spring> 
		Mapper를 한개씩 처리 <bean..> -->


	<mybatis-spring:scan base-package="com.sist.mapper"
		factory-ref="ssf" />


</beans>
